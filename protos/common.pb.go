// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/common.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Pager struct {
	CurrentPage int32 `protobuf:"varint,1,opt,name=current_page,json=currentPage" json:"current_page,omitempty"`
	TotalPage   int32 `protobuf:"varint,2,opt,name=total_page,json=totalPage" json:"total_page,omitempty"`
	Total       int32 `protobuf:"varint,3,opt,name=total" json:"total,omitempty"`
	Current     int32 `protobuf:"varint,4,opt,name=current" json:"current,omitempty"`
}

func (m *Pager) Reset()                    { *m = Pager{} }
func (m *Pager) String() string            { return proto.CompactTextString(m) }
func (*Pager) ProtoMessage()               {}
func (*Pager) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Pager) GetCurrentPage() int32 {
	if m != nil {
		return m.CurrentPage
	}
	return 0
}

func (m *Pager) GetTotalPage() int32 {
	if m != nil {
		return m.TotalPage
	}
	return 0
}

func (m *Pager) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Pager) GetCurrent() int32 {
	if m != nil {
		return m.Current
	}
	return 0
}

type Query struct {
	Field string `protobuf:"bytes,1,opt,name=field" json:"field,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Query) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *Query) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type GetByQuery struct {
	Query []*Query `protobuf:"bytes,1,rep,name=query" json:"query,omitempty"`
}

func (m *GetByQuery) Reset()                    { *m = GetByQuery{} }
func (m *GetByQuery) String() string            { return proto.CompactTextString(m) }
func (*GetByQuery) ProtoMessage()               {}
func (*GetByQuery) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *GetByQuery) GetQuery() []*Query {
	if m != nil {
		return m.Query
	}
	return nil
}

type GetByID struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetByID) Reset()                    { *m = GetByID{} }
func (m *GetByID) String() string            { return proto.CompactTextString(m) }
func (*GetByID) ProtoMessage()               {}
func (*GetByID) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GetByID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*Pager)(nil), "protos.Pager")
	proto.RegisterType((*Query)(nil), "protos.Query")
	proto.RegisterType((*GetByQuery)(nil), "protos.GetByQuery")
	proto.RegisterType((*GetByID)(nil), "protos.GetByID")
}

func init() { proto.RegisterFile("protos/common.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x90, 0xbf, 0x4e, 0x85, 0x30,
	0x14, 0xc6, 0x03, 0xd7, 0x7a, 0xe5, 0xa0, 0x0e, 0xd5, 0xa1, 0x0e, 0x26, 0x58, 0x17, 0x26, 0x8c,
	0xf2, 0x06, 0xc4, 0xc4, 0xb8, 0x69, 0x47, 0x17, 0x53, 0xa1, 0x12, 0x12, 0xa0, 0x58, 0x8a, 0x09,
	0x6f, 0x7f, 0xd3, 0x73, 0x60, 0x82, 0xdf, 0xf7, 0xa7, 0x5f, 0x5a, 0xb8, 0x99, 0x9c, 0xf5, 0x76,
	0x7e, 0xaa, 0xed, 0x30, 0xd8, 0xb1, 0x40, 0xe2, 0xe7, 0x24, 0xca, 0x15, 0xd8, 0x87, 0x6e, 0x8d,
	0xe3, 0x0f, 0x70, 0x59, 0x2f, 0xce, 0x99, 0xd1, 0x7f, 0x4f, 0xba, 0x35, 0x22, 0xca, 0xa2, 0x9c,
	0xa9, 0x74, 0xd3, 0x42, 0x86, 0xdf, 0x03, 0x78, 0xeb, 0x75, 0x4f, 0x81, 0x18, 0x03, 0x09, 0x2a,
	0x68, 0xdf, 0x02, 0x43, 0x10, 0x07, 0x74, 0x08, 0xb8, 0x80, 0xe3, 0x76, 0x86, 0x38, 0x43, 0x7d,
	0x47, 0x59, 0x02, 0xfb, 0x5c, 0x8c, 0x5b, 0x43, 0xf1, 0xb7, 0x33, 0x7d, 0x83, 0x9b, 0x89, 0x22,
	0x08, 0xea, 0xbf, 0xee, 0x17, 0x1a, 0x4a, 0x14, 0x81, 0x7c, 0x06, 0x78, 0x33, 0xbe, 0x5a, 0xa9,
	0xf9, 0x08, 0xec, 0x2f, 0xfc, 0x88, 0x28, 0x3b, 0xe4, 0xe9, 0xcb, 0x15, 0x5d, 0x6e, 0x2e, 0xd0,
	0x55, 0xe4, 0xc9, 0x3b, 0x38, 0x62, 0xe5, 0xfd, 0x95, 0x5f, 0x43, 0xdc, 0xed, 0x33, 0x71, 0xd7,
	0x54, 0x17, 0x5f, 0xdb, 0x3b, 0xfc, 0xd0, 0xb7, 0x3c, 0x05, 0x00, 0x00, 0xff, 0xff, 0x7d, 0x34,
	0x34, 0xce, 0x2d, 0x01, 0x00, 0x00,
}
