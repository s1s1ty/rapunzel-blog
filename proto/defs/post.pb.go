// Code generated by protoc-gen-go. DO NOT EDIT.
// source: defs/post.proto

package defs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Post struct {
	Id         string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title      string   `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Body       string   `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
	Categories []string `protobuf:"bytes,4,rep,name=categories" json:"categories,omitempty"`
	Tags       []string `protobuf:"bytes,5,rep,name=tags" json:"tags,omitempty"`
	UserId     string   `protobuf:"bytes,6,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	CreatedAt  string   `protobuf:"bytes,7,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt  string   `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	Status     string   `protobuf:"bytes,9,opt,name=status" json:"status,omitempty"`
	Views      int64    `protobuf:"varint,10,opt,name=views" json:"views,omitempty"`
	Favourites int64    `protobuf:"varint,11,opt,name=favourites" json:"favourites,omitempty"`
}

func (m *Post) Reset()                    { *m = Post{} }
func (m *Post) String() string            { return proto.CompactTextString(m) }
func (*Post) ProtoMessage()               {}
func (*Post) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Post) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Post) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Post) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Post) GetCategories() []string {
	if m != nil {
		return m.Categories
	}
	return nil
}

func (m *Post) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Post) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Post) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Post) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Post) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Post) GetViews() int64 {
	if m != nil {
		return m.Views
	}
	return 0
}

func (m *Post) GetFavourites() int64 {
	if m != nil {
		return m.Favourites
	}
	return 0
}

type ReqPostCreate struct {
	Title      string   `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Body       string   `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
	Categories []string `protobuf:"bytes,3,rep,name=categories" json:"categories,omitempty"`
	Tags       []string `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
}

func (m *ReqPostCreate) Reset()                    { *m = ReqPostCreate{} }
func (m *ReqPostCreate) String() string            { return proto.CompactTextString(m) }
func (*ReqPostCreate) ProtoMessage()               {}
func (*ReqPostCreate) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *ReqPostCreate) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReqPostCreate) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *ReqPostCreate) GetCategories() []string {
	if m != nil {
		return m.Categories
	}
	return nil
}

func (m *ReqPostCreate) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type ResPost struct {
	Post   *Post    `protobuf:"bytes,1,opt,name=post" json:"post,omitempty"`
	Errors []*Error `protobuf:"bytes,2,rep,name=errors" json:"errors,omitempty"`
}

func (m *ResPost) Reset()                    { *m = ResPost{} }
func (m *ResPost) String() string            { return proto.CompactTextString(m) }
func (*ResPost) ProtoMessage()               {}
func (*ResPost) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *ResPost) GetPost() *Post {
	if m != nil {
		return m.Post
	}
	return nil
}

func (m *ResPost) GetErrors() []*Error {
	if m != nil {
		return m.Errors
	}
	return nil
}

type ReqPostUpdate struct {
	Id         string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title      string   `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Body       string   `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
	Categories []string `protobuf:"bytes,4,rep,name=categories" json:"categories,omitempty"`
	Tags       []string `protobuf:"bytes,5,rep,name=tags" json:"tags,omitempty"`
}

func (m *ReqPostUpdate) Reset()                    { *m = ReqPostUpdate{} }
func (m *ReqPostUpdate) String() string            { return proto.CompactTextString(m) }
func (*ReqPostUpdate) ProtoMessage()               {}
func (*ReqPostUpdate) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *ReqPostUpdate) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ReqPostUpdate) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReqPostUpdate) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *ReqPostUpdate) GetCategories() []string {
	if m != nil {
		return m.Categories
	}
	return nil
}

func (m *ReqPostUpdate) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type ResPostSuccess struct {
	Success bool     `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Errors  []*Error `protobuf:"bytes,2,rep,name=errors" json:"errors,omitempty"`
}

func (m *ResPostSuccess) Reset()                    { *m = ResPostSuccess{} }
func (m *ResPostSuccess) String() string            { return proto.CompactTextString(m) }
func (*ResPostSuccess) ProtoMessage()               {}
func (*ResPostSuccess) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *ResPostSuccess) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ResPostSuccess) GetErrors() []*Error {
	if m != nil {
		return m.Errors
	}
	return nil
}

type ReqPostChangeStatus struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	NewStatus string `protobuf:"bytes,2,opt,name=new_status,json=newStatus" json:"new_status,omitempty"`
}

func (m *ReqPostChangeStatus) Reset()                    { *m = ReqPostChangeStatus{} }
func (m *ReqPostChangeStatus) String() string            { return proto.CompactTextString(m) }
func (*ReqPostChangeStatus) ProtoMessage()               {}
func (*ReqPostChangeStatus) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *ReqPostChangeStatus) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ReqPostChangeStatus) GetNewStatus() string {
	if m != nil {
		return m.NewStatus
	}
	return ""
}

type ResPostList struct {
	Posts []*Post `protobuf:"bytes,1,rep,name=posts" json:"posts,omitempty"`
	Pager *Pager  `protobuf:"bytes,2,opt,name=pager" json:"pager,omitempty"`
}

func (m *ResPostList) Reset()                    { *m = ResPostList{} }
func (m *ResPostList) String() string            { return proto.CompactTextString(m) }
func (*ResPostList) ProtoMessage()               {}
func (*ResPostList) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *ResPostList) GetPosts() []*Post {
	if m != nil {
		return m.Posts
	}
	return nil
}

func (m *ResPostList) GetPager() *Pager {
	if m != nil {
		return m.Pager
	}
	return nil
}

func init() {
	proto.RegisterType((*Post)(nil), "defs.Post")
	proto.RegisterType((*ReqPostCreate)(nil), "defs.ReqPostCreate")
	proto.RegisterType((*ResPost)(nil), "defs.ResPost")
	proto.RegisterType((*ReqPostUpdate)(nil), "defs.ReqPostUpdate")
	proto.RegisterType((*ResPostSuccess)(nil), "defs.ResPostSuccess")
	proto.RegisterType((*ReqPostChangeStatus)(nil), "defs.ReqPostChangeStatus")
	proto.RegisterType((*ResPostList)(nil), "defs.ResPostList")
}

func init() { proto.RegisterFile("defs/post.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 490 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x93, 0xc1, 0x6e, 0xd4, 0x30,
	0x10, 0x86, 0xb5, 0x49, 0x76, 0xb7, 0x99, 0x15, 0x05, 0x0c, 0x02, 0xab, 0x52, 0xab, 0x25, 0x5c,
	0xf6, 0xd2, 0x44, 0x2a, 0x7d, 0x81, 0x16, 0x38, 0x20, 0x21, 0x58, 0xb9, 0xe2, 0xc2, 0x65, 0x71,
	0x62, 0x37, 0x35, 0xdd, 0xc4, 0xc1, 0x76, 0xba, 0x02, 0x89, 0x07, 0xe1, 0x6d, 0x91, 0xc7, 0xd9,
	0xb6, 0xaa, 0xa8, 0xc4, 0xa9, 0xb7, 0x99, 0xef, 0xb7, 0xc7, 0x33, 0xff, 0x24, 0xf0, 0x58, 0xc8,
	0x73, 0x5b, 0x74, 0xda, 0xba, 0xbc, 0x33, 0xda, 0x69, 0x92, 0x78, 0xb0, 0xf7, 0x04, 0xb1, 0x34,
	0x46, 0x9b, 0xc0, 0xf7, 0x9e, 0x22, 0xa9, 0x74, 0xd3, 0xe8, 0x36, 0xa0, 0xec, 0x4f, 0x04, 0xc9,
	0x52, 0x5b, 0x47, 0x76, 0x21, 0x52, 0x82, 0x8e, 0xe6, 0xa3, 0x45, 0xca, 0x22, 0x25, 0xc8, 0x73,
	0x18, 0x3b, 0xe5, 0xd6, 0x92, 0x46, 0x88, 0x42, 0x42, 0x08, 0x24, 0xa5, 0x16, 0x3f, 0x69, 0x8c,
	0x10, 0x63, 0x72, 0x00, 0x50, 0x71, 0x27, 0x6b, 0x6d, 0x94, 0xb4, 0x34, 0x99, 0xc7, 0x8b, 0x94,
	0xdd, 0x22, 0xfe, 0x8e, 0xe3, 0xb5, 0xa5, 0x63, 0x54, 0x30, 0x26, 0x2f, 0x61, 0xda, 0x5b, 0x69,
	0x56, 0x4a, 0xd0, 0x09, 0x96, 0x9a, 0xf8, 0xf4, 0x83, 0x20, 0xfb, 0x00, 0x95, 0x91, 0xdc, 0x49,
	0xb1, 0xe2, 0x8e, 0x4e, 0x51, 0x4b, 0x07, 0x72, 0xe2, 0xbc, 0xdc, 0x77, 0x62, 0x2b, 0xef, 0x04,
	0x79, 0x20, 0x27, 0x8e, 0xbc, 0x80, 0x89, 0x75, 0xdc, 0xf5, 0x96, 0xa6, 0xa1, 0x6a, 0xc8, 0xfc,
	0x30, 0x57, 0x4a, 0x6e, 0x2c, 0x85, 0xf9, 0x68, 0x11, 0xb3, 0x90, 0xf8, 0xc6, 0xcf, 0xf9, 0x95,
	0xee, 0x8d, 0x72, 0xd2, 0xd2, 0x19, 0x4a, 0xb7, 0x48, 0xd6, 0xc0, 0x23, 0x26, 0x7f, 0x78, 0x77,
	0xde, 0x62, 0x03, 0x37, 0x9e, 0x8c, 0xfe, 0xe5, 0x49, 0x74, 0xaf, 0x27, 0xf1, 0xbd, 0x9e, 0x24,
	0x37, 0x9e, 0x64, 0x9f, 0x60, 0xca, 0xa4, 0xc5, 0x65, 0x1c, 0x40, 0xe2, 0xd7, 0x89, 0xef, 0xcc,
	0x8e, 0x20, 0xf7, 0x7b, 0xcb, 0xbd, 0xc2, 0x90, 0x93, 0xd7, 0x30, 0xc1, 0xbd, 0x5a, 0x1a, 0xcd,
	0xe3, 0xc5, 0xec, 0x68, 0x16, 0x4e, 0xbc, 0xf7, 0x8c, 0x0d, 0x52, 0xf6, 0xfb, 0xba, 0xfd, 0x2f,
	0x68, 0xd0, 0xc3, 0xae, 0x38, 0xfb, 0x0c, 0xbb, 0xc3, 0x38, 0x67, 0x7d, 0x55, 0x49, 0x6b, 0x09,
	0x85, 0xa9, 0x0d, 0x21, 0x36, 0xb1, 0xc3, 0xb6, 0xe9, 0xff, 0xcd, 0xf3, 0x0e, 0x9e, 0x6d, 0xd7,
	0x71, 0xc1, 0xdb, 0x5a, 0x9e, 0x85, 0xdd, 0xde, 0x9d, 0x6a, 0x1f, 0xa0, 0x95, 0x9b, 0xd5, 0xf0,
	0x1d, 0x84, 0xd1, 0xd2, 0x56, 0x6e, 0xc2, 0xf1, 0x8c, 0xc1, 0x6c, 0x68, 0xeb, 0xa3, 0xb2, 0x8e,
	0xcc, 0x61, 0xec, 0x1d, 0xf5, 0x1d, 0xc5, 0x77, 0xac, 0x0e, 0x02, 0x79, 0x05, 0xe3, 0x8e, 0xd7,
	0xd2, 0x60, 0xa9, 0xeb, 0xd6, 0x96, 0x1e, 0xb1, 0xa0, 0x9c, 0x7e, 0x83, 0xac, 0x55, 0xed, 0x77,
	0x9e, 0x5b, 0x7e, 0xa9, 0xca, 0xdc, 0xf0, 0xae, 0x6f, 0x7f, 0xc9, 0x75, 0xce, 0x5b, 0x61, 0xb4,
	0x12, 0xe1, 0x57, 0x3b, 0x4d, 0x7d, 0xd5, 0xa5, 0x0f, 0x97, 0xa3, 0xaf, 0x87, 0xb5, 0x72, 0x17,
	0x7d, 0x99, 0x57, 0xba, 0x29, 0xec, 0xf1, 0xa5, 0x2a, 0xed, 0x71, 0xa3, 0x8a, 0xed, 0xcd, 0xc3,
	0x72, 0xad, 0xeb, 0x02, 0xaf, 0x15, 0xfe, 0xb9, 0x72, 0x82, 0xf1, 0x9b, 0xbf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xac, 0x01, 0x43, 0x09, 0xeb, 0x03, 0x00, 0x00,
}
