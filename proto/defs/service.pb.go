// Code generated by protoc-gen-go. DO NOT EDIT.
// source: defs/service.proto

package defs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RapunzelBlogService service

type RapunzelBlogServiceClient interface {
	Register(ctx context.Context, in *ReqRegistration, opts ...grpc.CallOption) (*ResRegistration, error)
	Login(ctx context.Context, in *ReqLogin, opts ...grpc.CallOption) (*ResLogin, error)
	Profile(ctx context.Context, in *ReqProfile, opts ...grpc.CallOption) (*ResProfile, error)
	Update(ctx context.Context, in *ReqUpdateUser, opts ...grpc.CallOption) (*ResUpdateUser, error)
	ChangePassword(ctx context.Context, in *ReqChangePassword, opts ...grpc.CallOption) (*ResChangePassword, error)
	ChangeStatus(ctx context.Context, in *ReqChangeUserStatus, opts ...grpc.CallOption) (*ResChangeUserStatus, error)
	ChangeType(ctx context.Context, in *ReqChangeUserType, opts ...grpc.CallOption) (*ResChangeUserType, error)
	Logout(ctx context.Context, in *ReqUserLogout, opts ...grpc.CallOption) (*ResUserLogout, error)
	ResetPasswordRequest(ctx context.Context, in *ReqResetPasswordRequest, opts ...grpc.CallOption) (*ResResetPasswordRequest, error)
	ResetPassword(ctx context.Context, in *ReqResetPassword, opts ...grpc.CallOption) (*ResResetPassword, error)
	CreatePost(ctx context.Context, in *ReqPostCreate, opts ...grpc.CallOption) (*ResPost, error)
	UpdatePost(ctx context.Context, in *ReqPostUpdate, opts ...grpc.CallOption) (*ResPost, error)
	DeletePost(ctx context.Context, in *GetByID, opts ...grpc.CallOption) (*ResPostSuccess, error)
	ChangePostStatus(ctx context.Context, in *ReqPostChangeStatus, opts ...grpc.CallOption) (*ResPost, error)
	GetPost(ctx context.Context, in *GetByID, opts ...grpc.CallOption) (*ResPost, error)
	FavouritePost(ctx context.Context, in *GetByID, opts ...grpc.CallOption) (*ResPost, error)
	GetPosts(ctx context.Context, in *GetByQuery, opts ...grpc.CallOption) (*ResPostList, error)
	CreateComment(ctx context.Context, in *ReqCommentCreate, opts ...grpc.CallOption) (*ResComment, error)
	UpdateComment(ctx context.Context, in *ReqCommentUpdate, opts ...grpc.CallOption) (*ResComment, error)
	DeleteComment(ctx context.Context, in *GetByID, opts ...grpc.CallOption) (*ResCommentSuccess, error)
	GetComment(ctx context.Context, in *GetByID, opts ...grpc.CallOption) (*ResComment, error)
	GetComments(ctx context.Context, in *GetByQuery, opts ...grpc.CallOption) (*ResCommentList, error)
}

type rapunzelBlogServiceClient struct {
	cc *grpc.ClientConn
}

func NewRapunzelBlogServiceClient(cc *grpc.ClientConn) RapunzelBlogServiceClient {
	return &rapunzelBlogServiceClient{cc}
}

func (c *rapunzelBlogServiceClient) Register(ctx context.Context, in *ReqRegistration, opts ...grpc.CallOption) (*ResRegistration, error) {
	out := new(ResRegistration)
	err := grpc.Invoke(ctx, "/defs.RapunzelBlogService/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapunzelBlogServiceClient) Login(ctx context.Context, in *ReqLogin, opts ...grpc.CallOption) (*ResLogin, error) {
	out := new(ResLogin)
	err := grpc.Invoke(ctx, "/defs.RapunzelBlogService/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapunzelBlogServiceClient) Profile(ctx context.Context, in *ReqProfile, opts ...grpc.CallOption) (*ResProfile, error) {
	out := new(ResProfile)
	err := grpc.Invoke(ctx, "/defs.RapunzelBlogService/Profile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapunzelBlogServiceClient) Update(ctx context.Context, in *ReqUpdateUser, opts ...grpc.CallOption) (*ResUpdateUser, error) {
	out := new(ResUpdateUser)
	err := grpc.Invoke(ctx, "/defs.RapunzelBlogService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapunzelBlogServiceClient) ChangePassword(ctx context.Context, in *ReqChangePassword, opts ...grpc.CallOption) (*ResChangePassword, error) {
	out := new(ResChangePassword)
	err := grpc.Invoke(ctx, "/defs.RapunzelBlogService/ChangePassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapunzelBlogServiceClient) ChangeStatus(ctx context.Context, in *ReqChangeUserStatus, opts ...grpc.CallOption) (*ResChangeUserStatus, error) {
	out := new(ResChangeUserStatus)
	err := grpc.Invoke(ctx, "/defs.RapunzelBlogService/ChangeStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapunzelBlogServiceClient) ChangeType(ctx context.Context, in *ReqChangeUserType, opts ...grpc.CallOption) (*ResChangeUserType, error) {
	out := new(ResChangeUserType)
	err := grpc.Invoke(ctx, "/defs.RapunzelBlogService/ChangeType", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapunzelBlogServiceClient) Logout(ctx context.Context, in *ReqUserLogout, opts ...grpc.CallOption) (*ResUserLogout, error) {
	out := new(ResUserLogout)
	err := grpc.Invoke(ctx, "/defs.RapunzelBlogService/Logout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapunzelBlogServiceClient) ResetPasswordRequest(ctx context.Context, in *ReqResetPasswordRequest, opts ...grpc.CallOption) (*ResResetPasswordRequest, error) {
	out := new(ResResetPasswordRequest)
	err := grpc.Invoke(ctx, "/defs.RapunzelBlogService/ResetPasswordRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapunzelBlogServiceClient) ResetPassword(ctx context.Context, in *ReqResetPassword, opts ...grpc.CallOption) (*ResResetPassword, error) {
	out := new(ResResetPassword)
	err := grpc.Invoke(ctx, "/defs.RapunzelBlogService/ResetPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapunzelBlogServiceClient) CreatePost(ctx context.Context, in *ReqPostCreate, opts ...grpc.CallOption) (*ResPost, error) {
	out := new(ResPost)
	err := grpc.Invoke(ctx, "/defs.RapunzelBlogService/CreatePost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapunzelBlogServiceClient) UpdatePost(ctx context.Context, in *ReqPostUpdate, opts ...grpc.CallOption) (*ResPost, error) {
	out := new(ResPost)
	err := grpc.Invoke(ctx, "/defs.RapunzelBlogService/UpdatePost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapunzelBlogServiceClient) DeletePost(ctx context.Context, in *GetByID, opts ...grpc.CallOption) (*ResPostSuccess, error) {
	out := new(ResPostSuccess)
	err := grpc.Invoke(ctx, "/defs.RapunzelBlogService/DeletePost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapunzelBlogServiceClient) ChangePostStatus(ctx context.Context, in *ReqPostChangeStatus, opts ...grpc.CallOption) (*ResPost, error) {
	out := new(ResPost)
	err := grpc.Invoke(ctx, "/defs.RapunzelBlogService/ChangePostStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapunzelBlogServiceClient) GetPost(ctx context.Context, in *GetByID, opts ...grpc.CallOption) (*ResPost, error) {
	out := new(ResPost)
	err := grpc.Invoke(ctx, "/defs.RapunzelBlogService/GetPost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapunzelBlogServiceClient) FavouritePost(ctx context.Context, in *GetByID, opts ...grpc.CallOption) (*ResPost, error) {
	out := new(ResPost)
	err := grpc.Invoke(ctx, "/defs.RapunzelBlogService/FavouritePost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapunzelBlogServiceClient) GetPosts(ctx context.Context, in *GetByQuery, opts ...grpc.CallOption) (*ResPostList, error) {
	out := new(ResPostList)
	err := grpc.Invoke(ctx, "/defs.RapunzelBlogService/GetPosts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapunzelBlogServiceClient) CreateComment(ctx context.Context, in *ReqCommentCreate, opts ...grpc.CallOption) (*ResComment, error) {
	out := new(ResComment)
	err := grpc.Invoke(ctx, "/defs.RapunzelBlogService/CreateComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapunzelBlogServiceClient) UpdateComment(ctx context.Context, in *ReqCommentUpdate, opts ...grpc.CallOption) (*ResComment, error) {
	out := new(ResComment)
	err := grpc.Invoke(ctx, "/defs.RapunzelBlogService/UpdateComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapunzelBlogServiceClient) DeleteComment(ctx context.Context, in *GetByID, opts ...grpc.CallOption) (*ResCommentSuccess, error) {
	out := new(ResCommentSuccess)
	err := grpc.Invoke(ctx, "/defs.RapunzelBlogService/DeleteComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapunzelBlogServiceClient) GetComment(ctx context.Context, in *GetByID, opts ...grpc.CallOption) (*ResComment, error) {
	out := new(ResComment)
	err := grpc.Invoke(ctx, "/defs.RapunzelBlogService/GetComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapunzelBlogServiceClient) GetComments(ctx context.Context, in *GetByQuery, opts ...grpc.CallOption) (*ResCommentList, error) {
	out := new(ResCommentList)
	err := grpc.Invoke(ctx, "/defs.RapunzelBlogService/GetComments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RapunzelBlogService service

type RapunzelBlogServiceServer interface {
	Register(context.Context, *ReqRegistration) (*ResRegistration, error)
	Login(context.Context, *ReqLogin) (*ResLogin, error)
	Profile(context.Context, *ReqProfile) (*ResProfile, error)
	Update(context.Context, *ReqUpdateUser) (*ResUpdateUser, error)
	ChangePassword(context.Context, *ReqChangePassword) (*ResChangePassword, error)
	ChangeStatus(context.Context, *ReqChangeUserStatus) (*ResChangeUserStatus, error)
	ChangeType(context.Context, *ReqChangeUserType) (*ResChangeUserType, error)
	Logout(context.Context, *ReqUserLogout) (*ResUserLogout, error)
	ResetPasswordRequest(context.Context, *ReqResetPasswordRequest) (*ResResetPasswordRequest, error)
	ResetPassword(context.Context, *ReqResetPassword) (*ResResetPassword, error)
	CreatePost(context.Context, *ReqPostCreate) (*ResPost, error)
	UpdatePost(context.Context, *ReqPostUpdate) (*ResPost, error)
	DeletePost(context.Context, *GetByID) (*ResPostSuccess, error)
	ChangePostStatus(context.Context, *ReqPostChangeStatus) (*ResPost, error)
	GetPost(context.Context, *GetByID) (*ResPost, error)
	FavouritePost(context.Context, *GetByID) (*ResPost, error)
	GetPosts(context.Context, *GetByQuery) (*ResPostList, error)
	CreateComment(context.Context, *ReqCommentCreate) (*ResComment, error)
	UpdateComment(context.Context, *ReqCommentUpdate) (*ResComment, error)
	DeleteComment(context.Context, *GetByID) (*ResCommentSuccess, error)
	GetComment(context.Context, *GetByID) (*ResComment, error)
	GetComments(context.Context, *GetByQuery) (*ResCommentList, error)
}

func RegisterRapunzelBlogServiceServer(s *grpc.Server, srv RapunzelBlogServiceServer) {
	s.RegisterService(&_RapunzelBlogService_serviceDesc, srv)
}

func _RapunzelBlogService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapunzelBlogServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defs.RapunzelBlogService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapunzelBlogServiceServer).Register(ctx, req.(*ReqRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

func _RapunzelBlogService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapunzelBlogServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defs.RapunzelBlogService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapunzelBlogServiceServer).Login(ctx, req.(*ReqLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _RapunzelBlogService_Profile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapunzelBlogServiceServer).Profile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defs.RapunzelBlogService/Profile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapunzelBlogServiceServer).Profile(ctx, req.(*ReqProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RapunzelBlogService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapunzelBlogServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defs.RapunzelBlogService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapunzelBlogServiceServer).Update(ctx, req.(*ReqUpdateUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RapunzelBlogService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChangePassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapunzelBlogServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defs.RapunzelBlogService/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapunzelBlogServiceServer).ChangePassword(ctx, req.(*ReqChangePassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _RapunzelBlogService_ChangeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChangeUserStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapunzelBlogServiceServer).ChangeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defs.RapunzelBlogService/ChangeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapunzelBlogServiceServer).ChangeStatus(ctx, req.(*ReqChangeUserStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _RapunzelBlogService_ChangeType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChangeUserType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapunzelBlogServiceServer).ChangeType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defs.RapunzelBlogService/ChangeType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapunzelBlogServiceServer).ChangeType(ctx, req.(*ReqChangeUserType))
	}
	return interceptor(ctx, in, info, handler)
}

func _RapunzelBlogService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserLogout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapunzelBlogServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defs.RapunzelBlogService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapunzelBlogServiceServer).Logout(ctx, req.(*ReqUserLogout))
	}
	return interceptor(ctx, in, info, handler)
}

func _RapunzelBlogService_ResetPasswordRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapunzelBlogServiceServer).ResetPasswordRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defs.RapunzelBlogService/ResetPasswordRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapunzelBlogServiceServer).ResetPasswordRequest(ctx, req.(*ReqResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RapunzelBlogService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqResetPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapunzelBlogServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defs.RapunzelBlogService/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapunzelBlogServiceServer).ResetPassword(ctx, req.(*ReqResetPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _RapunzelBlogService_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPostCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapunzelBlogServiceServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defs.RapunzelBlogService/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapunzelBlogServiceServer).CreatePost(ctx, req.(*ReqPostCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _RapunzelBlogService_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPostUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapunzelBlogServiceServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defs.RapunzelBlogService/UpdatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapunzelBlogServiceServer).UpdatePost(ctx, req.(*ReqPostUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _RapunzelBlogService_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapunzelBlogServiceServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defs.RapunzelBlogService/DeletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapunzelBlogServiceServer).DeletePost(ctx, req.(*GetByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RapunzelBlogService_ChangePostStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPostChangeStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapunzelBlogServiceServer).ChangePostStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defs.RapunzelBlogService/ChangePostStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapunzelBlogServiceServer).ChangePostStatus(ctx, req.(*ReqPostChangeStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _RapunzelBlogService_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapunzelBlogServiceServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defs.RapunzelBlogService/GetPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapunzelBlogServiceServer).GetPost(ctx, req.(*GetByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RapunzelBlogService_FavouritePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapunzelBlogServiceServer).FavouritePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defs.RapunzelBlogService/FavouritePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapunzelBlogServiceServer).FavouritePost(ctx, req.(*GetByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RapunzelBlogService_GetPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapunzelBlogServiceServer).GetPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defs.RapunzelBlogService/GetPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapunzelBlogServiceServer).GetPosts(ctx, req.(*GetByQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RapunzelBlogService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommentCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapunzelBlogServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defs.RapunzelBlogService/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapunzelBlogServiceServer).CreateComment(ctx, req.(*ReqCommentCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _RapunzelBlogService_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommentUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapunzelBlogServiceServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defs.RapunzelBlogService/UpdateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapunzelBlogServiceServer).UpdateComment(ctx, req.(*ReqCommentUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _RapunzelBlogService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapunzelBlogServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defs.RapunzelBlogService/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapunzelBlogServiceServer).DeleteComment(ctx, req.(*GetByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RapunzelBlogService_GetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapunzelBlogServiceServer).GetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defs.RapunzelBlogService/GetComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapunzelBlogServiceServer).GetComment(ctx, req.(*GetByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RapunzelBlogService_GetComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapunzelBlogServiceServer).GetComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defs.RapunzelBlogService/GetComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapunzelBlogServiceServer).GetComments(ctx, req.(*GetByQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _RapunzelBlogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "defs.RapunzelBlogService",
	HandlerType: (*RapunzelBlogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _RapunzelBlogService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _RapunzelBlogService_Login_Handler,
		},
		{
			MethodName: "Profile",
			Handler:    _RapunzelBlogService_Profile_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RapunzelBlogService_Update_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _RapunzelBlogService_ChangePassword_Handler,
		},
		{
			MethodName: "ChangeStatus",
			Handler:    _RapunzelBlogService_ChangeStatus_Handler,
		},
		{
			MethodName: "ChangeType",
			Handler:    _RapunzelBlogService_ChangeType_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _RapunzelBlogService_Logout_Handler,
		},
		{
			MethodName: "ResetPasswordRequest",
			Handler:    _RapunzelBlogService_ResetPasswordRequest_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _RapunzelBlogService_ResetPassword_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _RapunzelBlogService_CreatePost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _RapunzelBlogService_UpdatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _RapunzelBlogService_DeletePost_Handler,
		},
		{
			MethodName: "ChangePostStatus",
			Handler:    _RapunzelBlogService_ChangePostStatus_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _RapunzelBlogService_GetPost_Handler,
		},
		{
			MethodName: "FavouritePost",
			Handler:    _RapunzelBlogService_FavouritePost_Handler,
		},
		{
			MethodName: "GetPosts",
			Handler:    _RapunzelBlogService_GetPosts_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _RapunzelBlogService_CreateComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _RapunzelBlogService_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _RapunzelBlogService_DeleteComment_Handler,
		},
		{
			MethodName: "GetComment",
			Handler:    _RapunzelBlogService_GetComment_Handler,
		},
		{
			MethodName: "GetComments",
			Handler:    _RapunzelBlogService_GetComments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "defs/service.proto",
}

func init() { proto.RegisterFile("defs/service.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 580 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xdf, 0x6f, 0xd3, 0x30,
	0x10, 0xc7, 0x83, 0x04, 0xdb, 0x74, 0xac, 0x63, 0xf3, 0xc6, 0xa6, 0x59, 0xda, 0x4b, 0xde, 0xf6,
	0xb0, 0x44, 0x74, 0x95, 0x10, 0x20, 0x21, 0x68, 0xab, 0x55, 0x48, 0x7d, 0x28, 0x2d, 0xe3, 0x81,
	0xb7, 0x34, 0xbd, 0x65, 0x66, 0x6d, 0xdc, 0xf9, 0x9c, 0xa1, 0xf2, 0x4f, 0xf0, 0x2f, 0xa3, 0xc4,
	0xce, 0x8f, 0x26, 0xd9, 0x5b, 0xfc, 0xf9, 0xde, 0xf7, 0xce, 0xbe, 0x73, 0x0c, 0x6c, 0x81, 0x77,
	0xe4, 0x13, 0xaa, 0x27, 0x11, 0xa2, 0xb7, 0x56, 0x52, 0x4b, 0xf6, 0x32, 0x65, 0xfc, 0x4d, 0xa6,
	0x24, 0x84, 0xca, 0x60, 0x0b, 0xd6, 0x92, 0xb4, 0x05, 0xc6, 0x1b, 0xca, 0xd5, 0x0a, 0xe3, 0x9c,
	0x1d, 0x15, 0x4c, 0xc6, 0x06, 0x75, 0xff, 0x01, 0x1c, 0x4f, 0x83, 0x75, 0x12, 0xff, 0xc5, 0x65,
	0x7f, 0x29, 0xa3, 0x99, 0x29, 0xc6, 0x3e, 0xc2, 0xde, 0x14, 0x23, 0x41, 0x1a, 0x15, 0x7b, 0xeb,
	0xa5, 0x3e, 0x6f, 0x8a, 0x8f, 0x06, 0xa9, 0x40, 0x0b, 0x19, 0xf3, 0x02, 0x53, 0x15, 0xbb, 0x0e,
	0xbb, 0x84, 0x57, 0x63, 0x19, 0x89, 0x98, 0x1d, 0x14, 0xc6, 0x6c, 0xcd, 0x8b, 0x35, 0x65, 0x6b,
	0xd7, 0x61, 0x3e, 0xec, 0x4e, 0x94, 0xbc, 0x13, 0x4b, 0x64, 0x87, 0x45, 0xb0, 0x25, 0xbc, 0x20,
	0x64, 0x89, 0xeb, 0xb0, 0x1e, 0xec, 0xdc, 0xae, 0x17, 0x81, 0x46, 0x76, 0x5c, 0xc4, 0x1b, 0x70,
	0x4b, 0xa8, 0x78, 0x01, 0xa9, 0x84, 0xae, 0xc3, 0x86, 0x70, 0x30, 0xb8, 0x0f, 0xe2, 0x08, 0x27,
	0x01, 0xd1, 0x1f, 0xa9, 0x16, 0xec, 0xac, 0x70, 0x6f, 0x0b, 0xbc, 0x10, 0x68, 0x5b, 0x70, 0x1d,
	0x76, 0x03, 0xfb, 0x86, 0xcd, 0x74, 0xa0, 0x13, 0x62, 0xe7, 0xb5, 0x1c, 0x69, 0x31, 0x23, 0xf1,
	0xf3, 0x5a, 0x96, 0x52, 0x72, 0x1d, 0xf6, 0x05, 0xc0, 0xd0, 0x1f, 0x9b, 0x35, 0x36, 0x76, 0x92,
	0x86, 0xa6, 0x42, 0x63, 0x27, 0xb9, 0x60, 0xba, 0x30, 0x96, 0x91, 0x4c, 0x74, 0xb5, 0x0b, 0x84,
	0xca, 0xc0, 0x6a, 0x17, 0x0a, 0xe8, 0x3a, 0xec, 0x27, 0x9c, 0x4c, 0x91, 0x50, 0xe7, 0x47, 0x9a,
	0xe2, 0x63, 0x82, 0xa4, 0xd9, 0x45, 0x65, 0xbe, 0x4d, 0x99, 0x5f, 0x54, 0xe6, 0xdc, 0x94, 0x5d,
	0x87, 0x7d, 0x85, 0xce, 0x96, 0xc2, 0x4e, 0xdb, 0x13, 0xf2, 0xd3, 0xf6, 0x4c, 0xae, 0xc3, 0xba,
	0x00, 0x03, 0x85, 0x81, 0xc6, 0x89, 0xa4, 0xea, 0xa1, 0xd2, 0xa5, 0x11, 0x78, 0xa7, 0xbc, 0x0d,
	0x32, 0x2b, 0xdb, 0x05, 0x30, 0x43, 0x6e, 0xf1, 0x18, 0xa1, 0xe9, 0xb9, 0x06, 0x18, 0xe2, 0x12,
	0xad, 0xc7, 0xca, 0x23, 0xd4, 0xfd, 0xcd, 0xb7, 0x21, 0x3f, 0xd9, 0x8a, 0x9e, 0x25, 0x61, 0x88,
	0x94, 0xce, 0xeb, 0x33, 0x1c, 0xda, 0xbb, 0x90, 0xe2, 0xfa, 0xec, 0xb3, 0x2d, 0x56, 0xae, 0x45,
	0xb3, 0xe8, 0x25, 0xec, 0x8e, 0x50, 0xb7, 0x55, 0x6c, 0x84, 0xfa, 0xd0, 0xb9, 0x09, 0x9e, 0x64,
	0xa2, 0x44, 0xfb, 0x16, 0x1b, 0x86, 0x77, 0xb0, 0x67, 0x73, 0x53, 0xfe, 0x07, 0x65, 0xb1, 0xdf,
	0x13, 0x54, 0x1b, 0x7e, 0xb4, 0x15, 0x3e, 0x16, 0x99, 0xe5, 0x13, 0x74, 0x4c, 0x4b, 0x07, 0xe6,
	0x71, 0xa8, 0x8c, 0xcb, 0x12, 0xdb, 0xf1, 0xf2, 0xff, 0xb3, 0xdc, 0x98, 0x4d, 0x6f, 0x9f, 0x35,
	0xdb, 0xd6, 0xb7, 0x99, 0x3f, 0x40, 0xc7, 0x74, 0x3f, 0x37, 0xd7, 0x4e, 0x77, 0x56, 0xf7, 0x94,
	0x33, 0xf0, 0x01, 0x46, 0xa8, 0x9f, 0xf1, 0xb5, 0xd5, 0x7a, 0x0f, 0xaf, 0x4b, 0x43, 0x5b, 0x6f,
	0x4e, 0xea, 0x26, 0xd3, 0x9e, 0x7e, 0x08, 0x6e, 0x2c, 0xe2, 0xdf, 0x81, 0x47, 0xc1, 0x83, 0x98,
	0x7b, 0xca, 0x3e, 0x8e, 0x5e, 0x10, 0x2f, 0x94, 0x14, 0x0b, 0xf3, 0x6e, 0xf6, 0xf7, 0xed, 0x43,
	0x39, 0x49, 0x57, 0x93, 0x17, 0xbf, 0xae, 0x22, 0xa1, 0xef, 0x93, 0xb9, 0x17, 0xca, 0x95, 0x4f,
	0xbd, 0x07, 0x31, 0xa7, 0xde, 0x4a, 0xf8, 0xb9, 0xf9, 0x6a, 0xbe, 0x94, 0x91, 0x9f, 0x39, 0xfd,
	0xb4, 0xea, 0x7c, 0x27, 0xfb, 0xbe, 0xfe, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x83, 0xac, 0x27, 0xa6,
	0xe2, 0x05, 0x00, 0x00,
}
